
{% extends '::layout_xtending_dashboard.html.twig' %}

{% block main_box_label %}{% trans %}Seguimiento Online{% endtrans %}{% endblock %}
{% block main_box -%}
<div class="main-box clearfix profile-box-menu">
										<div class="main-box-body clearfix">
<div class="profile-box-header green-bg clearfix" style="background-image: url(http://www.triabox.com/{{ asset(entity.photoBackground) }});">
	<div class="form-group">
												
												<div class="pull-left">
													 <label>Crear Ruta</label>
													    <div class="onoffswitch" id="create_route">
															<input type="checkbox" name="create_rute" class="onoffswitch-checkbox" id="create_rute" checked>
															<label class="onoffswitch-label" for="create_rute">
																<div class="onoffswitch-inner"></div>
																<div class="onoffswitch-switch"></div>
															</label>
														</div>
													</div>
													<div class="pull-left">
													 <label>Crear Kilometros</label>
													    <div class="onoffswitch onoffswitch-danger">
															<input type="checkbox" name="create_kilometre" class="onoffswitch-checkbox" id="create_kilometre">
															<label class="onoffswitch-label" for="create_kilometre">
																<div class="onoffswitch-inner"></div>
																<div class="onoffswitch-switch"></div>
															</label>
														</div>
													</div>
													<div class="pull-left">
													 <label>Limpiar Ruta</label>
													    <div class="onoffswitch">
															<input type="checkbox" name="route" class="onoffswitch-checkbox" id="route" checked>
															<label class="onoffswitch-label" for="route">
																<div class="onoffswitch-inner"></div>
																<div class="onoffswitch-switch"></div>
															</label>
														</div>
													</div>
													<div class="pull-left">
													 <label>Limpiar Kilometros</label>
													    <div class="onoffswitch onoffswitch-danger">
															<input type="checkbox" name="kilometre" class="onoffswitch-checkbox" id="kilometre" checked>
															<label class="onoffswitch-label" for="kilometre">
																<div class="onoffswitch-inner"></div>
																<div class="onoffswitch-switch"></div>
															</label>
														</div>
													</div>
											
												</div>
											
</div>
</div></div>						
<div id="map" style="height: 700px"></div>
	

{% endblock %}
{% block main_col %}{% endblock %}
{% block lateral_box %}

{% endblock %}
{% block script_custom %}


		
// This example creates a 2-pixel-wide red polyline showing the path of William
// Kingsford Smith's first trans-Pacific flight between Oakland, CA, and
// Brisbane, Australia.


var count = 0;
var poly;
var map;
var markers = [];
var markersKilometre = [];



function initMap() {
 map = new google.maps.Map(document.getElementById('map'), {
    zoom: 14,
    center: {lat:{{ entity.latitude }}, lng: {{ entity.longitude }}}  // Center the map on Chicago, USA.
  });
  
  map.addListener('rightclick', function(e) {
  
  		executeActionMap(e);
  	
          
  });

  
  poly = new google.maps.Polyline({
    strokeColor: '#00bfff',
    strokeOpacity: 0.5,
    strokeWeight: 8

  });
  poly.setMap(map);
  initPath();

}

function executeActionMap(e){

	if($('#create_rute').is(":checked")){
		createRoute(e.latLng);
	}else{
		if($('#create_kilometre').is(":checked")){
			createRouteKilometre(e.latLng);
		}
	}

}

// Adds a marker to the map and push to the array.
function addMarker(location) {
  var marker = new google.maps.Marker({
    position: location,
    title: '{{ name }}',
    map: map
  });
  markers.push(marker);
}

function addMarkerKilometro(location,number) {

	var image = {
          url: 'http://www.triabox.com/web/img/map/number_'+number+'.png',
          // This marker is 20 pixels wide by 32 pixels high.
         
          
        };
        
  var markerKilometre = new google.maps.Marker({
    position: location,
    	icon: image,
    title: '{{ name }}',
    map: map
  });
  markersKilometre.push(markerKilometre);
}

// Sets the map on all markers in the array.
function setMapOnAll(map,markers) {
  for (var i = 0; i < markers.length; i++) {
    markers[i].setMap(map);
  }
}

// Removes the markers from the map, but keeps them in the array.
function clearMarkers() {
  setMapOnAll(null,markers);
}

// Shows any markers currently in the array.
function showMarkers() {
  setMapOnAll(map,markers);
}

// Deletes all markers in the array by removing references to them.
function deleteMarkers() {
  clearMarkers();
  markers = [];
}

function createRouteKilometre(LatLng){

	count =  count +1;
	sendPoint(LatLng,"k",count);
	addMarkerKilometro(LatLng,count);
}

function createRoute(LatLng){
	sendPoint(LatLng,"route",0);
	addObjectLatLng(LatLng);
}

// Handles click events on a map, and adds a new point to the Polyline.
function addLatLng(lat,lng) {
	addObjectLatLng(new google.maps.LatLng(lat, lng));
}

function addObjectLatLng(LatLng){

	var path = poly.getPath();
	
  	// Because path is an MVCArray, we can simply append a new coordinate
  	// and it will automatically appear.
   	path.push(LatLng);
   	deleteMarkers();
  	// Add a new marker at the new plotted point on the polyline.
 	addMarker(LatLng);
}

function sendPoint(LatLng,description,time){

		var url = '{{ path('event_send_point', { 'latitude': 'latitude_value','longitude': 'longitude_value','time': 'time_value','user':'user_value','idEvent':idEvent,'idTraining':0   }) }}';
		url  = url.replace('latitude_value', LatLng.lat());
		url  = url.replace('longitude_value', LatLng.lng());
		url  = url.replace('user_value', description);
		url  = url.replace('time_value', time);

		var jqxhr = $.ajax(url)
   		    .done(function() {
   		     // alert("Enviado"+position.coords.latitude);
   		    })
   		    .fail(function() {
   		    	// alert('Error al enviar los datos'+ambiente+"/event/"+position.coords.latitude+"/geo/"+position.coords.longitude+"/map/"+position.timestamp+"/point/"+idUser+"/"+idEvent );
   		      
   		    });
		
}

	function initPath(){
		{% for entity in entities %}
				addLatLng({{ entity.latitude }},{{  entity.longitude }});
		{% endfor %}
		
		{% for entity in kilometre %}
				count = count + 1;
				
				addMarkerKilometro(new google.maps.LatLng({{ entity.latitude }}, {{  entity.longitude }}),count);
				
		{% endfor %}
	
	}
	
	$("#route").click( function(){
   		if( !$(this).is(':checked') ){poly.setMap(null);}else{poly.setMap(map);};
	});

	$("#kilometre").click( function(){
   		if( !$(this).is(':checked') ){ setMapOnAll(null,markersKilometre) ;}else{setMapOnAll(map,markersKilometre) ;};
	});
{% endblock %}

